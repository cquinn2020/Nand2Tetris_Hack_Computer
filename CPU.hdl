// Name: Casey Quinn
// UIN: 430009866

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    
    // ALU (built in) -> add additional output that gets recycled
    ALU(x=DregOut,y=AMmuxOut,zx=instruction[11],nx=instruction[10], zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=outM,out=outALUrecycled,zr=zero,ng=negative);
    // Set up D register
    // Set up load signal for D register (load D reg if C instruction and D is destination)
    And(a=instruction[15], b=instruction[4], out=loadDreg);
    DRegister(in=outALUrecycled, load=loadDreg, out=DregOut);

    // Set up A Mux (decides between A instruction or C instruction)
    Mux16(a=instruction, b=outALUrecycled, sel=instruction[15], out=AMuxOut);
    
    
    // Set up the A register:
    // Set up the load signal for the A register (load A if A instruction or A is destination from C instruction)
    Not(in=instruction[15], out=notIn15);
    Or(a=instruction[5], b=notIn15, out=loadAreg);
    ARegister(in=AMuxOut, load=loadAreg, out=AregOut, out[0..14]=addressM, out=pcIn); // A reg out is also the addressM & pcIN
    

    // Set up AM mux that decides between inM data or A register output
    Mux16(a=AregOut, b=inM, sel=instruction[12], out=AMmuxOut);

    // When we will write to the memory or not.. C instruction and M is destination
    And(a=instruction[15], b=instruction[3], out=writeM);

    /* Set up the load for the PC 
    - Need to parse the jump bits and then check ALU flags zr and ng to see if any jump
     conditions are true.
    */ 
    // Set up negations that will be used: negate ALU flags and jump bits
    Not(in=zero, out=notZero);
    Not(in=negative, out=notNegative);
    Not(in=instruction[2], out=notJ1);
    Not(in=instruction[1], out=notJ2);
    Not(in=instruction[0], out=notJ3);

    // JGT: (J1'J2'J3) * (zr' * ng')
    And3(in1=notJ1, in2=notJ2, in3=instruction[0], out=notJ1notJ2J1);
    And(a=notZero, b=notNegative, out=notZeroNotNeg);
    And(a=notJ1notJ2J1, b=notZeroNotNeg, out=outJGT);

    // JEQ: (J1'J2J3') * zr
    And3(in1=notJ1, in2=instruction[1], in3=notJ3, out=notJ1J2notJ3);
    And(a=notJ1J2notJ3, b=zero, out=outJEQ);
    
    // JGE: (J1'J2J3) * (zr + ng')
    And3(in1=notJ1, in2=instruction[1], in3=instruction[0], out=notJ1J2J3);
    Or(a=zero, b=notNegative, out=zrOrNotNegative);
    And(a=notJ1J2J3, b=zrOrNotNegative, out=outJGE);

    // JLT: (J1J2'J3') * (ng
    And3(in1=instruction[2], in2=notJ2, in3=notJ3, out=J1notJ2notJ3);
    And(a=negative, b=J1notJ2notJ3, out=outJLT);

    // JNE: (J1J2'J3) * zr'
    And3(in1=instruction[2], in2=notJ2, in3=instruction[0], out=J1notJ2J3);
    And(a=notZero, b=J1notJ2J3, out=outJNE);

    // JLE: (J1J2J3') * (zr + ng)
    And3(in1=instruction[2], in2=instruction[1], in3=notJ3, out=J1J2notJ3);
    Or(a=zero, b=negative, out=zeroOrNeg);
    And(a=J1J2notJ3, b=zeroOrNeg, out=outJLE);

    // JMP (unconditional jump): (J1J2J3)
    And3(in1=instruction[2], in2=instruction[1], in3=instruction[0], out=outJMP);

    //  If any of the above 7 conditions are true and its a C instruction: then load PC should be true
    Or7(in1=outJGT, in2=outJEQ, in3=outJGE, in4=outJLT, in5=outJNE, in6=outJLE, in7=outJMP, out=outOr7);
    And(a=instruction[15], b=outOr7, out=loadPC);

    // Set up program counter (inc always true bc will increment whenever a new address is not loaded from a jump)
    PC(in=pcIn, load=loadPC, inc=true, reset=reset, out[0..14]=pc);
}