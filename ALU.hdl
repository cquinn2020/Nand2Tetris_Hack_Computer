//NAME: Casey Quinn

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // bitwise not the x input?
        zy, // zero the y input?
        ny, // bitwise not the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // bitwise not the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // Not the x and y inputs
    Not16(in=x, out=notX);
    Not16(in=y, out=notY);

    // Manipulate x:
    SixteenBitMUX4(a=x, b=false, c=notX, d=true, sel1=zx, sel2=nx, out=xPrime);
    // Manipulate y:
    SixteenBitMUX4(a=y, b=false, c=notY, d=true, sel1=zy, sel2=ny, out=yPrime);

    // Compute x+y and x^y:
    Add16(a=xPrime, b=yPrime, out=xPLUSy);
    And16(a=xPrime, b=yPrime, out=xANDy);

    // MUX with x+y and xANDy with select f to determine which 
    // goes forward.
    SixteenBitMUX2(a=xANDy, b=xPLUSy, sel=f, out=outA);

    // Compute Not outA and then use mux to decide between them
    // using no as a select.
    Not16(in=outA, out=notOutA);
    SixteenBitMUX2(a=outA, b=notOutA, sel=no, out=out, out=use);

    // compute zr
    Or16(a=use, out=ORed);
    Not(in=ORed, out=zr);
    

    // compute ng
    And16(a=true, b=use, out[15]=ng, out[0..14]=forget);
        
   
}